package launcher;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import pathcontroller.Control_Invoker;
import pathplanner.Astar;
import reversecontroller.reverse_controller;
import unity_communication.packetsender;
import unity_communication.position_parser;

public class Waypoint_determination {
	public Astar astar;
	pathplanner.Path ret;
	int index;
	double[] pos= new double[6];
	byte[] data= ("0,0").getBytes();
	Control_Invoker invoke;
	packetsender send;
	int ds;
	FirstWP one;
	SecondWP two;
	ThirdWP three;
	reverse_controller rc;
	
    position_parser parser;
	
   
 
	 Waypoint_determination(int dock_choice) throws IOException, InterruptedException{
		 
	    	  
	
	if (dock_choice==1)
	{				
		   one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			 // rc=new reverse_controller();
		    
	}
	
	if (dock_choice==2)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	}
	
	if (dock_choice==3)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	
	}
	
	if (dock_choice==4)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	
	}
	
	if (dock_choice==5)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	
	}
	
	if (dock_choice==6)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	}
	if (dock_choice==7)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	}
	
	if (dock_choice==8)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	
	}
	
	if (dock_choice==9)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	}
	
	if (dock_choice==10)
	{				
		  one=new FirstWP();
			//TimeUnit.SECONDS.sleep(3);
				
					    
		   two=new SecondWP();
				
					////
		   // TimeUnit.SECONDS.sleep(3); 
		    three= new ThirdWP();
		 //TimeUnit.SECONDS.sleep(3); 
					//System.out.println("starting reverse");
			  rc=new reverse_controller();
	
	}
	
						
	 }
	
}
