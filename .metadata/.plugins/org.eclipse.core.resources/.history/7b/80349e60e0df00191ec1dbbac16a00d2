package launcher;

import java.util.concurrent.TimeUnit;

import pathcontroller.Control_Invoker;
import pathplanner.Astar;
import reverse.Revsteer;
import unity_communication.packetsender;
import unity_communication.position_parser;

public class Waypoint_determination {
	public Astar astar;
	pathplanner.Path ret;
	int index;
	double[] pos= new double[6];
	byte[] data= ("0,0").getBytes();
	Control_Invoker invoke;
	packetsender send;
	Revsteer rev;
	int preprex; 
	
	
	 Waypoint_determination(int choice){
		 
	 
	
	if (choice==1)
	{				
		
		//23 for dock 1 //27 for dock2 //30 for dock 3
		
		//so increment by 4 metres
		
		
			astar=new Astar((int)pos[4], (int)pos[5], (int)pos[4],(int)pos[5]-34);
			ret=astar.retval();
			index=astar.indret();
			invoke=new Control_Invoker(ret,index);
		    pos=parser.position_parser(data);
			System.out.println("now we are at");
			System.out.println(pos[4]);
		    System.out.println(pos[5]);
		    
		    
		    //remember 15
	}

			astar=new Astar((int)pos[4], (int)pos[5], (int)pos[4]-10,(int)pos[5]);
		
		//an option to replan if Astar fails/throws an exception//
		//also safety/collision checker-haywire management
		//alignment checker before reversing
		//feedback-error correction service
		//also rpi java modules 
		//comparison
			//osgi features eduthu katta
			//remote management

	ret=astar.retval();
	index=astar.indret();
	
	invoke=new Control_Invoker(ret,index);
					
					//rev=new Revsteer();			    	
	//astar=new Astar((int)pos[4], (int)pos[5], (int)pos[4]-5,(int)pos[5]);
	
	//ret=astar.retval();
	//index=astar.indret();
	
	//invoke=new Control_Invoker(ret,index);
	
					// pos=parser.position_parser(data);
						//System.out.println("now we are at");
						//System.out.println(pos[4]);
						//System.out.println(pos[5]);
				
						
						//data=("0.1,0.2").getBytes();
						
						//send=new packetsender(data);
						//TimeUnit.SECONDS.sleep(4);		
						 //data=("0,0").getBytes();
						//	send=new packetsender(data);
	 }
	
}
