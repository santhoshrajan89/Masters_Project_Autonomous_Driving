package pathplanner;


import java.util.ArrayList;
import java.util.Scanner;
import java.io.*; 
import java.util.*; 
import java.lang.Math; 



public class Astar 
{
	int x_size=16;
	int y_size=12;
	int index=0;  
	pair source=new pair(1,1);
	pair dest=new pair(5,5);
	int n=10;
	double min;
	int [][]GRID=new int[x_size][y_size];
	double [][]G_cost=new double[x_size][y_size];
	double [][]H_cost=new double[x_size][y_size];
	double [][]F_cost=new double[x_size][y_size];
	 neighbours neighbour=new neighbours();
	 Path closed=new Path();
	public void open()
	{
	   for (int i=0;i<x_size;i++)
	    {
		   for (int j=0;j<y_size;j++)
		  {
			GRID[i][j]=1;
		  }
	    }
	}
	
	public void closed()
	{
	   for (int i=5;i<=12;i++)
		  {
			GRID[i][6]=0;
		  }
	}
	
	
	//instanitate the closed and open list
	
	
	
	//compute costs
	
	 public void computecost()
	 {
	  for (int i=0; i<x_size;i++)
	   {
		for (int j=0; j<y_size;j++)
		  {
			if (GRID[i][j]==0)
			  { G_cost[i][j]=10000;
			     H_cost[i][j]=10000;}
			else {
				G_cost[i][j]=0;
				 H_cost[i][j]= Math.sqrt(Math.pow((i-dest.x),2)+Math.pow((j-dest.y),2));
				 }
			}
	     }
	  
	        for (int i=0; i<x_size;i++)
	          {
		       for (int j=0; j<y_size;j++)
		        {
		        F_cost[i][j]=G_cost[i][j]+H_cost[i][j];
		        }
	           }
	      //assign lists
	        list x=new list (source.x,source.y,0,H_cost[source.x][source.y],F_cost[source.x][source.y]);
	        list y=new list(0,0,0,0,0);
	        
	       
	   	     
	          neighbour.x[0]=x;
	          
	          for (int i=1;i<8;i++ )
	          {
	        	  neighbour.x[i]=y;
	          }
	   	 
	        // System.out.print("cost_computed");
	         System.out.print(neighbour.x[0].f);
	            
	     }
	
	  
	 public void loop()
	 {
		  
	      
	      list NULL=new list (0,0,0,0,0);
	      
	for (int l=0; l<50;l++)
	  {
		 //System.out.print("dummy");
		 int neighbour_counter=0;
		 
		 min=neighbour.x[0].f;
		 System.out,print(min);
		 list taken=new list(0,0,0,0,0);
		 
		 for (int i=1; i<8;i++)
		 {
			 if (neighbour.x[i].f<min)
			 {
		      taken=neighbour.x[i];
			 //System.out.print(neighbour.x[i].x);
			 }
		 }
		// System.out.print("this is the minimum");
		 closed.x[index++]=taken;
		// System.out.print(closed.x[index].x);
		   //System.out.print(closed.x[index].y);
		 
	     if (taken.x==dest.x&& taken.y==dest.y)
	     {
	    	 System.out.print("path_found");
	    	 System.exit(0); 
	     }
	     //flush the neighbour list everytime
	     for (int s=0;s<8;s++)
	     {
	    	 neighbour.x[s]=NULL;
	     }
	     
	     for(int i = taken.x-1;i<taken.x+1;i++)
	     {
	    	 for(int j = taken.y-1;i<taken.y+1;i++)

	    	  {
	    		 if (i==taken.x&&j==taken.y)
	    		 {
	              continue;
	    		 }
	    		 
	    		 if (i<x_size||i>x_size||j<y_size||j>y_size)
	    		 {
	    			 continue;
	    		 }
	    		 
	    		 //if it passes all the above test, add it to the open list
	    		 G_cost[i][j]=G_cost[i][j]+Math.sqrt(Math.pow((i-taken.x),2)+Math.pow((j-taken.y),2));
	             
	             F_cost[i][j]=G_cost[i][j]+H_cost[i][j];
	    		 
	    		 Path templist=new Path();
	             list temp=new list(i,j,G_cost[i][j],H_cost[i][j],F_cost[i][j]);
	             
	              templist.x[0]=temp;
	             
	             for (int k=1;k<index;k++)
	             {
	                 if (closed.x[k]==templist.x[0])
	                     continue;
	                 
	             }
	             
	                     
	             neighbour.x[neighbour_counter++]=temp;
	    	   }
	      }
	 }//while(1) loop ends here
	 
	 
	 }
	
	 void printpath()
	 {
	   for (int c=1; c<=index;c++)
	     {
		   System.out.print("The path is");
		   System.out.print(closed.x[c].x);
		   System.out.print(closed.x[c].y);
	     }
		 
		 
	 }	 
	 
	
}
