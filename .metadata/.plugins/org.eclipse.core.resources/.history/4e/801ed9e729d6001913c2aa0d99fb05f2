package pathcontroller;

import java.io.IOException;

import pathplanner.Path;
import pathplanner.pair;
import unity_communication.packetsender;
import unity_communication.position_parser;
import java.math.*;
import java.util.concurrent.TimeUnit; 

public class Control_Invoker {
	int index;
	int x2,y2,x3,y3;
	position_parser activation;
	int[] pos;
	String message;
	double steering;
	Path ret;
	packetsender send;
	pair dest;
	pair source;
	
	
	pair actual;
	 byte[] data = ("0,0").getBytes();
	Actuator act;
	NSsteeringanglecalculator anglens;
	SNsteeringanglecalculator anglesn;
	EWsteeringanglecalculator angleew;
	WEsteeringanglecalculator anglewe;
	Orientationfinder O;
	double orientation_angle;
	int info;
	Errorcorrection e;
	
	public Control_Invoker(Path ret, int index) throws IOException, InterruptedException{
		this.ret=ret;
		this.index=index;
		
		position_parser activation;
		
		
		//analyze the closed list and extract the information
		
		// make a movement for every 5th point
		
		// before making a movement determine the orientation 
		
		//also account for the extra angle
		
		//come back and see the trace
		
		//correct position if the desired state is not achieved
		
		for (int i=0; i<5;i=i+5)
		{
			
			if (ret.x[i+5]==null)
			{
				break;
			}
			
			System.out.println("start"+ret.x[i].x+ret.x[i].y );
			System.out.println("end"+ret.x[i+5].x+ret.x[i+5].y );	
			dest=new pair(ret.x[i+5].x,ret.x[i+5].y );
			source=new pair(ret.x[i].x,ret.x[i].y );
			
			
			//find the current orientation
			
			O=new Orientationfinder();
			orientation_angle=O.Orientationfinder();
			info=O.Orientationinfo();
			
			System.out.println(info);
			
			//call the steering angle computer
			
			if (info==3)
			{
				anglens=new NSsteeringanglecalculator();
				steering=anglens.NSsteeringanglecalculator(dest,source,orientation_angle );
			}
			
			if (info==1)
			{
				angleew=new EWsteeringanglecalculator();
				steering=angleew.EWsteeringanglecalculator(dest,source,orientation_angle );
			}
			
			if (info==2)
			{
				anglewe=new WEsteeringanglecalculator();
				steering=anglewe.WEsteeringanglecalculator(dest,source,orientation_angle );
			}
			 System.out.println("the returned steering angle that must be fixed is "+steering);
			steering=Math.round(steering * 10) / 10.0;
			
		    System.out.println("the rounded steering angle that must be fixed is "+steering);
			
			
			act= new Actuator(steering);
			 TimeUnit.SECONDS.sleep(1);
			
			
			    activation=new position_parser();
	 			pos=activation.position_parser(data);
	 			//System.out.println("The positions of x1 and y1 are");
	 			
	 			
     	        System.out.println("but we actually ended at"+pos[4]+pos[5]);	
	            System.out.println("the difference is");
	 			System.out.println(pos[4]-ret.x[i+5].x);
	 			System.out.println(pos[5]-ret.x[i+5].y);
	 			
	 			//if (java.lang.Math.abs(pos[4]-ret.x[i+5].x)>2||java.lang.Math.abs(pos[5]-ret.x[i+5].y)>2)
	 			{
	 				//actual=new pair(pos[4], pos[5]);
		 			//e=new Errorcorrection(dest, actual);
	 			}
	 			
	 			
	 		
	 			
	 			
	 			//if (pos[4]-ret.x[i+5].x<=3&&pos[5]-ret.x[i+5].y<=3)
	 			{
	 				//continue;
	 			}
	 			
	 			//else
	 			{
	 				//stop first
	 				//call position corrector service
	 				
	 			}
	 			
			
		}
		
		
		
	

		//activation=new position_parser();
		//position=activation.position_parser(data);
	
		//System.out.println();
		//System.out.println("the current position of x3,y3 is");
		//System.out.println(x3);
	    //System.out.println(y3);
		
		//System.out.println("the current position of x2,y2 is");
		//System.out.println(x2);
		//System.out.println(y2);
		//System.out.println();
		//System.out.println("the current index is");
		//System.out.println(c);
		
		
		
	
		
    
	}
}
